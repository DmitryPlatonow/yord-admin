{"version":3,"sources":["places.js","CustomLoginPage.js","FIREBASE_CONFIG.js","App.js","registerServiceWorker.js","index.js"],"names":["PlaceFilter","props","Filter","TextInput","label","source","alwaysOn","PlaceList","List","filters","Datagrid","expand","TextField","RichTextField","DateField","EditButton","DeleteButton","redirect","ImagesList","record","images","map","e","src","key","item","index","title","alt","PlaceShow","Edit","SimpleForm","options","disabled","ImageField","ArrayInput","SimpleFormIterator","disableAdd","disableRemove","fullWidth","CustomLoginForm","style","fontFamily","marginLeft","LoginForm","CustomLoginPage","Login","loginForm","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","logging","dataProvider","FirebaseDataProvider","config","authProvider","FirebaseAuthProvider","App","Admin","loginPage","Resource","name","list","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cbbe6e51.chunk.js","sourcesContent":["// in src/posts.js\nimport * as React from \"react\";\n// tslint:disable-next-line:no-var-requires\nimport {\n    Datagrid,\n    List,\n    Show,\n    Create,\n    Edit,\n    Filter,\n    ArrayInput,\n    SimpleForm,\n    ReferenceInput,\n    TextField,\n    TextInput,\n    EditButton,\n    DeleteButton,\n    RichTextField,\n    SelectInput,\n    FileField,\n    FileInput,\n    DateInput,\n    ImageField,\n    DateField,\n    UrlField,\n    ArrayField,\n    SimpleFormIterator,\n} from \"react-admin\";\nimport RichTextInput from \"ra-input-rich-text\";\n\nconst PlaceFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"title\" alwaysOn />\n    </Filter>\n);\n\nexport const PlaceList = (props) => (\n    <List {...props} filters={<PlaceFilter />}>\n        <Datagrid expand={<PlaceShow /> }>\n            <TextField source=\"name\" />\n            <RichTextField source=\"type\" />\n            <DateField source=\"created\" />\n            <TextField source=\"schedule\" />\n            <EditButton label=\"\" />\n            <DeleteButton label=\"\" redirect={false}/>\n        </Datagrid>\n    </List>\n);\n\nconst ImagesList = ({ record }) => (\n    <div>\n        {record.images.map(e=>({src: e, key: e})).map((item, index) => (\n            <img key={item.key} src={item.src} title={index} alt='image' />\n        ))}\n    </div>\n);\n\nconst ArraySocials = ({ record }) => (\n        record.socials.map((item) => (\n            <TextInput label={item.type} source={item.value} />\n        ))\n);\n\nexport const PlaceShow = (props) => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" options={{ disabled: true }} />\n            <TextInput source=\"name\" />\n            <ImageField source=\"previewImage\" title=\"title\" />\n            <ImagesList source=\"images\" />\n            <ArrayInput source=\"socials\">\n                <SimpleFormIterator disableAdd disableRemove>\n                    <TextInput label='' source=\"type\" disabled />\n                    <TextInput label='' source=\"value\" fullWidth />\n                </SimpleFormIterator>\n            </ArrayInput>\n        </SimpleForm>\n    </Edit>\n);\n\n// export const PlaceShow = (props) => (\n//     <Show {...props}>\n//         <SimpleShowLayout>\n//             <TextField source=\"id\" />\n//             <TextField source=\"name\" />\n//             <ImageField source=\"previewImage\" title=\"title\" />\n//             <ImagesList source=\"images\" />\n//             <ArrayField source=\"socials\">\n//                 <Datagrid>\n//                     <TextField source=\"type\" />\n//                     <UrlField source=\"value\" />\n//                 </Datagrid>\n//             </ArrayField>\n//         </SimpleShowLayout>\n//     </Show>\n// );\n\nexport const PlaceCreate = (props) => (\n    <Create {...props} >\n        <SimpleForm>\n            <TextInput source=\"title\" />\n            <RichTextInput source=\"body\" />\n            <ReferenceInput label=\"Comment\" source=\"title\" reference=\"comments\">\n                <SelectInput optionText=\"title\" />\n            </ReferenceInput>\n            <FileInput source=\"file\" label=\"File\">\n                <FileField source=\"src\" title=\"title\" />\n            </FileInput>\n        </SimpleForm>\n    </Create>\n);\n\nexport const PlaceEdit = (props) => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput source=\"id\" options={{ disabled: true }} />\n            <DateInput source=\"createdate\" options={{ disabled: true }} />\n            <DateInput source=\"lastupdate\" options={{ disabled: true }} />\n            <ReferenceInput label=\"Comment\" source=\"title\" reference=\"comments\">\n                <SelectInput optionText=\"title\" />\n            </ReferenceInput>\n            <TextInput source=\"title\" />\n            <RichTextInput source=\"body\" />\n            <SelectInput source=\"rating\" choices={[\n                { id: 1, name: 'Good' },\n                { id: 2, name: 'Okay' },\n                { id: 3, name: 'Bad' },\n            ]} />\n            <FileInput source=\"file\" label=\"File\">\n                <FileField source=\"src\" title=\"title\" />\n            </FileInput>\n        </SimpleForm>\n    </Edit>\n);\n","// LoginPage.js\nimport React from \"react\";\nimport { Login, LoginForm } from \"react-admin\";\n\nconst CustomLoginForm = props => (\n  <div>\n    <div style={{fontFamily: \"monospace\", marginLeft: '15px'}}>\n      <p>Username: test@example.com</p>\n      <p>Password: password</p>\n    </div>\n    <LoginForm {...props} />\n  </div>\n);\n\nconst CustomLoginPage = props => (\n  <Login loginForm={<CustomLoginForm />} {...props} />\n);\n\nexport default CustomLoginPage;\n","export const firebaseConfig = {\n    apiKey: \"AIzaSyBy64jp4l-buypzRuGVgiML8nDNbFaLKSo\",\n    authDomain: \"yorld-dev-376cd.firebaseapp.com\",\n    databaseURL: \"https://yorld-dev-376cd-default-rtdb.europe-west1.firebasedatabase.app\",\n    projectId: \"yorld-dev-376cd\",\n    storageBucket: \"yorld-dev-376cd.appspot.com\",\n    messagingSenderId: \"157841451694\",\n    appId: \"1:157841451694:web:8d2bdad2f2f4af18051b3f\"\n};\n","import * as React from \"react\";\nimport { PlaceList } from \"./places\";\nimport { Admin, Resource } from \"react-admin\";\nimport {\n  FirebaseDataProvider,\n  FirebaseAuthProvider\n} from \"react-admin-firebase\";\nimport CustomLoginPage from './CustomLoginPage';\n\nimport { firebaseConfig as config } from './FIREBASE_CONFIG';\n\nconst options = {\n  logging: true,\n  //rootRef: '/places'\n}\nconst dataProvider = FirebaseDataProvider(config, options);\nconst authProvider = FirebaseAuthProvider(config, options);\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Admin\n        loginPage={CustomLoginPage}\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n      >\n        <Resource\n          name=\"places-test\"\n          list={PlaceList}\n        />\n      </Admin>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}